/*
 * Seller Products API
 * API para gestionar productos de vendedores
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.SellerProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellerProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SellerProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SellerProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSellerProduct
     * @param sellerProduct  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Producto creado correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerProductCall(SellerProduct sellerProduct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellerProduct;

        // create path and map variables
        String localVarPath = "/seller-products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSellerProductValidateBeforeCall(SellerProduct sellerProduct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerProduct' is set
        if (sellerProduct == null) {
            throw new ApiException("Missing the required parameter 'sellerProduct' when calling createSellerProduct(Async)");
        }

        return createSellerProductCall(sellerProduct, _callback);

    }

    /**
     * Crear un nuevo producto
     * 
     * @param sellerProduct  (required)
     * @return SellerProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Producto creado correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public SellerProduct createSellerProduct(SellerProduct sellerProduct) throws ApiException {
        ApiResponse<SellerProduct> localVarResp = createSellerProductWithHttpInfo(sellerProduct);
        return localVarResp.getData();
    }

    /**
     * Crear un nuevo producto
     * 
     * @param sellerProduct  (required)
     * @return ApiResponse&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Producto creado correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerProduct> createSellerProductWithHttpInfo(SellerProduct sellerProduct) throws ApiException {
        okhttp3.Call localVarCall = createSellerProductValidateBeforeCall(sellerProduct, null);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Crear un nuevo producto (asynchronously)
     * 
     * @param sellerProduct  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Producto creado correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerProductAsync(SellerProduct sellerProduct, final ApiCallback<SellerProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSellerProductValidateBeforeCall(sellerProduct, _callback);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSellerProduct
     * @param id ID del producto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Producto eliminado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSellerProductCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSellerProductValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSellerProduct(Async)");
        }

        return deleteSellerProductCall(id, _callback);

    }

    /**
     * Eliminar un producto por ID
     * 
     * @param id ID del producto (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Producto eliminado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSellerProduct(Integer id) throws ApiException {
        deleteSellerProductWithHttpInfo(id);
    }

    /**
     * Eliminar un producto por ID
     * 
     * @param id ID del producto (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Producto eliminado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSellerProductWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteSellerProductValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Eliminar un producto por ID (asynchronously)
     * 
     * @param id ID del producto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Producto eliminado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSellerProductAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSellerProductValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllSellerProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos de vendedores obtenida correctamente </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSellerProductsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSellerProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllSellerProductsCall(_callback);

    }

    /**
     * Obtener todos los productos de vendedores
     * 
     * @return List&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos de vendedores obtenida correctamente </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerProduct> getAllSellerProducts() throws ApiException {
        ApiResponse<List<SellerProduct>> localVarResp = getAllSellerProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener todos los productos de vendedores
     * 
     * @return ApiResponse&lt;List&lt;SellerProduct&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos de vendedores obtenida correctamente </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerProduct>> getAllSellerProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllSellerProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener todos los productos de vendedores (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos de vendedores obtenida correctamente </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSellerProductsAsync(final ApiCallback<List<SellerProduct>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSellerProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByProductAndSeller
     * @param productId ID del producto (required)
     * @param sellerId ID del vendedor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByProductAndSellerCall(Integer productId, Integer sellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/by-product-seller";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productId", productId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByProductAndSellerValidateBeforeCall(Integer productId, Integer sellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getByProductAndSeller(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getByProductAndSeller(Async)");
        }

        return getByProductAndSellerCall(productId, sellerId, _callback);

    }

    /**
     * Obtener un producto por productId y sellerId
     * 
     * @param productId ID del producto (required)
     * @param sellerId ID del vendedor (required)
     * @return SellerProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public SellerProduct getByProductAndSeller(Integer productId, Integer sellerId) throws ApiException {
        ApiResponse<SellerProduct> localVarResp = getByProductAndSellerWithHttpInfo(productId, sellerId);
        return localVarResp.getData();
    }

    /**
     * Obtener un producto por productId y sellerId
     * 
     * @param productId ID del producto (required)
     * @param sellerId ID del vendedor (required)
     * @return ApiResponse&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerProduct> getByProductAndSellerWithHttpInfo(Integer productId, Integer sellerId) throws ApiException {
        okhttp3.Call localVarCall = getByProductAndSellerValidateBeforeCall(productId, sellerId, null);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener un producto por productId y sellerId (asynchronously)
     * 
     * @param productId ID del producto (required)
     * @param sellerId ID del vendedor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByProductAndSellerAsync(Integer productId, Integer sellerId, final ApiCallback<SellerProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByProductAndSellerValidateBeforeCall(productId, sellerId, _callback);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfferDate
     * @param startDate Fecha de inicio del rango (required)
     * @param endDate Fecha de fin del rango (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de precios obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Par치metros de fecha inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferDateCall(LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/offer-date";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferDateValidateBeforeCall(LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getOfferDate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getOfferDate(Async)");
        }

        return getOfferDateCall(startDate, endDate, _callback);

    }

    /**
     * Obtener precios de productos por rango de fechas
     * 
     * @param startDate Fecha de inicio del rango (required)
     * @param endDate Fecha de fin del rango (required)
     * @return List&lt;Double&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de precios obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Par치metros de fecha inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public List<Double> getOfferDate(LocalDate startDate, LocalDate endDate) throws ApiException {
        ApiResponse<List<Double>> localVarResp = getOfferDateWithHttpInfo(startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * Obtener precios de productos por rango de fechas
     * 
     * @param startDate Fecha de inicio del rango (required)
     * @param endDate Fecha de fin del rango (required)
     * @return ApiResponse&lt;List&lt;Double&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de precios obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Par치metros de fecha inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Double>> getOfferDateWithHttpInfo(LocalDate startDate, LocalDate endDate) throws ApiException {
        okhttp3.Call localVarCall = getOfferDateValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener precios de productos por rango de fechas (asynchronously)
     * 
     * @param startDate Fecha de inicio del rango (required)
     * @param endDate Fecha de fin del rango (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de precios obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Par치metros de fecha inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOfferDateAsync(LocalDate startDate, LocalDate endDate, final ApiCallback<List<Double>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfferDateValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOffersByCif
     * @param cif CIF del vendedor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de ofertas obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersByCifCall(String cif, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/offers/{cif}"
            .replace("{" + "cif" + "}", localVarApiClient.escapeString(cif.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOffersByCifValidateBeforeCall(String cif, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cif' is set
        if (cif == null) {
            throw new ApiException("Missing the required parameter 'cif' when calling getOffersByCif(Async)");
        }

        return getOffersByCifCall(cif, _callback);

    }

    /**
     * Obtener ofertas activas de un vendedor por su CIF
     * 
     * @param cif CIF del vendedor (required)
     * @return List&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de ofertas obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerProduct> getOffersByCif(String cif) throws ApiException {
        ApiResponse<List<SellerProduct>> localVarResp = getOffersByCifWithHttpInfo(cif);
        return localVarResp.getData();
    }

    /**
     * Obtener ofertas activas de un vendedor por su CIF
     * 
     * @param cif CIF del vendedor (required)
     * @return ApiResponse&lt;List&lt;SellerProduct&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de ofertas obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerProduct>> getOffersByCifWithHttpInfo(String cif) throws ApiException {
        okhttp3.Call localVarCall = getOffersByCifValidateBeforeCall(cif, null);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener ofertas activas de un vendedor por su CIF (asynchronously)
     * 
     * @param cif CIF del vendedor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de ofertas obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOffersByCifAsync(String cif, final ApiCallback<List<SellerProduct>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOffersByCifValidateBeforeCall(cif, _callback);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSellerProductById
     * @param id ID del producto (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerProductByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerProductByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSellerProductById(Async)");
        }

        return getSellerProductByIdCall(id, _callback);

    }

    /**
     * Obtener un producto por ID
     * 
     * @param id ID del producto (required)
     * @return SellerProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public SellerProduct getSellerProductById(Integer id) throws ApiException {
        ApiResponse<SellerProduct> localVarResp = getSellerProductByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Obtener un producto por ID
     * 
     * @param id ID del producto (required)
     * @return ApiResponse&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerProduct> getSellerProductByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getSellerProductByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener un producto por ID (asynchronously)
     * 
     * @param id ID del producto (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerProductByIdAsync(Integer id, final ApiCallback<SellerProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSellerProductByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSellerProductsByCif
     * @param cif CIF del vendedor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerProductsByCifCall(String cif, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-products/by-cif/{cif}"
            .replace("{" + "cif" + "}", localVarApiClient.escapeString(cif.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerProductsByCifValidateBeforeCall(String cif, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cif' is set
        if (cif == null) {
            throw new ApiException("Missing the required parameter 'cif' when calling getSellerProductsByCif(Async)");
        }

        return getSellerProductsByCifCall(cif, _callback);

    }

    /**
     * Obtener productos de un vendedor por su CIF
     * 
     * @param cif CIF del vendedor (required)
     * @return List&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public List<SellerProduct> getSellerProductsByCif(String cif) throws ApiException {
        ApiResponse<List<SellerProduct>> localVarResp = getSellerProductsByCifWithHttpInfo(cif);
        return localVarResp.getData();
    }

    /**
     * Obtener productos de un vendedor por su CIF
     * 
     * @param cif CIF del vendedor (required)
     * @return ApiResponse&lt;List&lt;SellerProduct&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SellerProduct>> getSellerProductsByCifWithHttpInfo(String cif) throws ApiException {
        okhttp3.Call localVarCall = getSellerProductsByCifValidateBeforeCall(cif, null);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener productos de un vendedor por su CIF (asynchronously)
     * 
     * @param cif CIF del vendedor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de productos obtenida correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vendedor no encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSellerProductsByCifAsync(String cif, final ApiCallback<List<SellerProduct>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSellerProductsByCifValidateBeforeCall(cif, _callback);
        Type localVarReturnType = new TypeToken<List<SellerProduct>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSellerProduct
     * @param id ID del producto (required)
     * @param sellerProduct  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto actualizado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSellerProductCall(Integer id, SellerProduct sellerProduct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sellerProduct;

        // create path and map variables
        String localVarPath = "/seller-products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerProductValidateBeforeCall(Integer id, SellerProduct sellerProduct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSellerProduct(Async)");
        }

        // verify the required parameter 'sellerProduct' is set
        if (sellerProduct == null) {
            throw new ApiException("Missing the required parameter 'sellerProduct' when calling updateSellerProduct(Async)");
        }

        return updateSellerProductCall(id, sellerProduct, _callback);

    }

    /**
     * Actualizar un producto por ID
     * 
     * @param id ID del producto (required)
     * @param sellerProduct  (required)
     * @return SellerProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto actualizado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public SellerProduct updateSellerProduct(Integer id, SellerProduct sellerProduct) throws ApiException {
        ApiResponse<SellerProduct> localVarResp = updateSellerProductWithHttpInfo(id, sellerProduct);
        return localVarResp.getData();
    }

    /**
     * Actualizar un producto por ID
     * 
     * @param id ID del producto (required)
     * @param sellerProduct  (required)
     * @return ApiResponse&lt;SellerProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto actualizado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SellerProduct> updateSellerProductWithHttpInfo(Integer id, SellerProduct sellerProduct) throws ApiException {
        okhttp3.Call localVarCall = updateSellerProductValidateBeforeCall(id, sellerProduct, null);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Actualizar un producto por ID (asynchronously)
     * 
     * @param id ID del producto (required)
     * @param sellerProduct  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Producto actualizado correctamente </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Producto no encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Datos inv치lidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSellerProductAsync(Integer id, SellerProduct sellerProduct, final ApiCallback<SellerProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSellerProductValidateBeforeCall(id, sellerProduct, _callback);
        Type localVarReturnType = new TypeToken<SellerProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
